kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: jupyterhub-ocp-oauth
  annotations:
    openshift.io/display-name: JupyterHub (OCP OAuth)
    description: Template for deploying a JupyterHub instance, authenticating against the same OpenShift cluster.
    iconClass: icon-python
    tags: python,jupyter,jupyterhub
parameters:
  - name: APPLICATION_NAME
    value: jupyterhub
    required: true
  - name: APPLICATION_VERSION
    value: 3.5.3
    required: true
  - name: NOTEBOOK_IMAGE
    value: tensorflow-notebook
    required: true
  - name: JUPYTERHUB_CONFIG
    value: ""
    required: false
  - name: DATABASE_PASSWORD
    generate: expression
    from: '[a-zA-Z0-9]{16}'
    required: true
  - name: COOKIE_SECRET
    generate: expression
    from: '[a-f0-9]{32}'
    required: true
  - name: STORAGE_CLASS
    value: gp2
    required: true
  - name: SINGLEUSER_CPU_LIMIT
    value: "1"
  - name: SINGLEUSER_MEM_LIMIT
    value: 1Gi
objects:
  - kind: ImageStream
    apiVersion: image.openshift.io/v1
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      lookupPolicy:
        local: true
      tags:
        - name: ${APPLICATION_VERSION}
          from:
            kind: DockerImage
            name: quay.io/odh-jupyterhub/jupyterhub:v${APPLICATION_VERSION}
#  - kind: ImageStream
#    apiVersion: image.openshift.io/v1
#    metadata:
#      name: ${NOTEBOOK_IMAGE}
#      annotations:
#        opendatahub.io/notebook-image-desc: "${NOTEBOOK_IMAGE}"
#        opendatahub.io/notebook-image-name: "Intel Tensorflow Notebook Image"
#        opendatahub.io/notebook-image-url: "https://github.com/kkasravi/notebooks"
#      labels:
#        opendatahub.io/notebook-image: "true"
#        app: ${APPLICATION_NAME}
#      spec:
#        lookupPolicy:
#          local: true
#        tags:
#          - name: latest
#            from:
#              kind: DockerImage
#              name: quay.io/kamkasravi/tensorflow-notebook:latest
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    data:
      jupyterhub_config.py: ${JUPYTERHUB_CONFIG}
  - kind: ServiceAccount
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-hub
      labels:
        app: ${APPLICATION_NAME}
      annotations:
        serviceaccounts.openshift.io/oauth-redirectreference.first: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"${APPLICATION_NAME}"}}'
        serviceaccounts.openshift.io/oauth-redirecturi.first: hub/oauth_callback
        serviceaccounts.openshift.io/oauth-want-challenges: "false"
  - kind: RoleBinding
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-edit
      labels:
        app: ${APPLICATION_NAME}
    subjects:
      - kind: ServiceAccount
        name: ${APPLICATION_NAME}-hub
    roleRef:
      name: edit
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - wait-for-database
              - jupyterhub
            from:
              kind: ImageStreamTag
              name: ${APPLICATION_NAME}:${APPLICATION_VERSION}
      replicas: 1
      selector:
        app: ${APPLICATION_NAME}
        deploymentconfig: ${APPLICATION_NAME}
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
            deploymentconfig: ${APPLICATION_NAME}
        spec:
          serviceAccountName: ${APPLICATION_NAME}-hub
          initContainers:
            - name: wait-for-database
              image: ${APPLICATION_NAME}:${APPLICATION_VERSION}
              command:
                - /opt/app-root/scripts/wait-for-database
              env:
                - name: JUPYTERHUB_DATABASE_PASSWORD
                  value: ${DATABASE_PASSWORD}
                - name: JUPYTERHUB_DATABASE_HOST
                  value: ${APPLICATION_NAME}-db
          containers:
            - name: jupyterhub
              image: ${APPLICATION_NAME}:${APPLICATION_VERSION}
              ports:
                - containerPort: 8080
                  protocol: TCP
              env:
                - name: JUPYTERHUB_SERVICE_NAME
                  value: ${APPLICATION_NAME}
                - name: JUPYTERHUB_NOTEBOOK_IMAGE
                  value: quay.io/kamkasravi/tensorflow-notebook:v0.0.1
                - name: JUPYTERHUB_DATABASE_PASSWORD
                  value: ${DATABASE_PASSWORD}
                - name: JUPYTERHUB_DATABASE_HOST
                  value: ${APPLICATION_NAME}-db
                - name: JUPYTERHUB_COOKIE_SECRET
                  value: ${COOKIE_SECRET}
                - name: JUPYTERHUB_STORAGE_CLASS
                  value: ${STORAGE_CLASS}
                - name: SINGLEUSER_CPU_LIMIT
                  value: ${SINGLEUSER_CPU_LIMIT}
                - name: SINGLEUSER_MEM_LIMIT
                  value: ${SINGLEUSER_MEM_LIMIT}
              volumeMounts:
                - name: config
                  mountPath: /opt/app-root/configs
          volumes:
            - name: config
              configMap:
                name: ${APPLICATION_NAME}
                defaultMode: 420
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      ports:
        - name: 8080-tcp
          protocol: TCP
          port: 8080
          targetPort: 8080
        - name: 8081-tcp
          protocol: TCP
          port: 8081
          targetPort: 8081
      selector:
        app: ${APPLICATION_NAME}
        deploymentconfig: ${APPLICATION_NAME}
  - kind: Route
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      host: ""
      to:
        kind: Service
        name: ${APPLICATION_NAME}
        weight: 100
      port:
        targetPort: 8080-tcp
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-db
      labels:
        app: ${APPLICATION_NAME}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      storageClassName: ${STORAGE_CLASS}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${APPLICATION_NAME}-db
      labels:
        app: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APPLICATION_NAME}
        deploymentconfig: ${APPLICATION_NAME}-db
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
            deploymentconfig: ${APPLICATION_NAME}-db
        spec:
          containers:
            - name: postgresql
              env:
                - name: POSTGRESQL_USER
                  value: jupyterhub
                - name: POSTGRESQL_PASSWORD
                  value: ${DATABASE_PASSWORD}
                - name: POSTGRESQL_DATABASE
                  value: jupyterhub
              livenessProbe:
                tcpSocket:
                  port: 5432
              ports:
                - containerPort: 5432
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -i
                    - -c
                    - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
              volumeMounts:
                - mountPath: /var/lib/pgsql/data
                  name: data
          volumes:
            - name: data
              persistentVolumeClaim:
                claimName: ${APPLICATION_NAME}-db
            - name: config
              configMap:
                name: ${APPLICATION_NAME}
                defaultMode: 420
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - postgresql
            from:
              kind: ImageStreamTag
              name: postgresql:12
              namespace: openshift
          type: ImageChange
        - type: ConfigChange
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-db
      labels:
        app: ${APPLICATION_NAME}
    spec:
      ports:
        - name: 5432-tcp
          protocol: TCP
          port: 5432
          targetPort: 5432
      selector:
        app: ${APPLICATION_NAME}
        deploymentconfig: ${APPLICATION_NAME}-db
